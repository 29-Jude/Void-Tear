{"version":3,"sources":["assets/Script/AudioManager.ts","assets/Script/BGMusicController.ts","assets/Script/Boss.ts","assets/Script/Bullet.ts","assets/Script/Enemy.ts","assets/Script/EntityDropManager.ts","assets/Script/FireBullet.ts","assets/Script/GameController.ts","assets/Script/MinionSpawnController.ts","assets/Script/PlayerController.ts","assets/Script/PlayerMovement.ts","assets/Script/PowerupManager.ts","assets/Script/SceneManager.ts","assets/Script/SprRandomiser.ts","assets/Script/UIzPosSetter.ts","assets/Script/UpgradeRandomiser.ts","assets/Script/WaveSpawnsController.ts"],"names":["_a","cc","_decorator","ccclass","property","AudioManagerClass","_super","_this","apply","this","arguments","pistolShot","rifleShot","sniperShot","Reload","mainMenuBG","level1Theme","boss1Theme","defeatedTheme","enemyDeath","enemyMergeT1","UEgrowl","UEspawn","bossIncoming","speedupPU","bossWarning","levelUP","SpecialaudioId","__extends","prototype","PlayAudioEffect","clipToPlay","isRepeat","isFadeIn","audioId","audioEngine","playEffect","setVolume","fadeInAudio","PlayMusic","isLooped","playMusic","StopAudio","isFadeOut","fadeOutAudio","stop","duration","volumeObj","volume","tween","to","onUpdate","start","onComplete","__decorate","type","AudioClip","Component","exports","default","AudioManager_1","require","BGMusicClass","AudioManager","bgMusic","node","getComponent","Enemy_1","Boss","Name","SpawnsMinions","SpawnTime","SpawnDelay","MinionSpawnPrefabs","MinionSpawnPoints","UnstableMeter","BossBar","initialSpawnFunctionSet","healthDepletionPercentage","HeavyHealthDepletionPercentage","tweenDuration","damageAmtRecived","isScheduled","spawnTimeUpdated","spawnTimeUpdated2","scheduleMinionSpawning","unschedule","spawnMinions","schedule","macro","REPEAT_FOREVER","updateSpawnTime","newSpawnTime","DamageMinions","depleteHP","enemyScript","MaxHealth","spawnPoint1WorldPos","convertToWorldSpaceAR","v2","spawnPoint2WorldPos","newEnemy","newEnemy2","instantiate","zIndex","parent","setPosition","convertToNodeSpaceAR","addChild","Damage","Math","floor","onLoad","find","active","getComponentInChildren","Label","string","toUpperCase","ProgressBar","progress","Health","emissionRate","update","HPprogress","getChildByName","easing","call","newScaleX","scaleX","newScaleY","scaleY","scaleAction","scaleTo","runAction","MoveSpeed","audioManager","Prefab","Node","ParticleSystem","BulletClass","bulletSpeed","bulletDamage","direction","v3","init","normalize","dt","moveStep","clone","multiplyScalar","position","add","x","winSize","width","y","height","destroy","Boss_1","Bullet_1","EntityDropManager_1","GameController_1","PlayerController_1","PowerupManager_1","SceneManager_1","EnemyClass","EnemyTag","enemyHealthText","entityDropManager","entityDropManager2","mergedEnemySpawn","mergedEliteEnemySpawn","ChanceToSpawnElite","upgradeSprites","MaxMoveSpeed","SpawnWeight","DeathScore","CorruptionPower","merged","maxSpeedUp","isSpeedUp","EnemyClass_1","onCollisionEnter","other","self","tag","console","log","isGameOver","director","loadScene","SceneToLoad","canMerge","mergeEnemies","speedBuffAmt","scheduleOnce","resetSpeedBuff","speedBuffTimer","healthUpAmt","otherEnemy","selfEnemy","mergedSpawn","chance","random","DamageAmt","Heal","HealAmt","getCollisionManager","enabled","preloadScene","moveTowardsPlayer","deltaTime","playerNode","subtract","speed","mul","error","rotateTowardsPlayer","playerPos","enemyPos","angleRadians","atan2","adjustedAngle","misc","radiansToDegrees","angle","speedChange","randomSpeeds","forEach","element","toFixed","BossDefeated","dropItems","addScore","addKills","EntityDropManagerClass","itemDropPoints","ItemDropChance","RandomItemDrop","ItemsToDrop","length","droppedItemType","droppedItem","worldPos","localPos","Float","min","max","step","FireBulletClass","bullet","posX","posY","spawnBullet","event","newBullet","mousePos","getLocation","worldMousePos","bulletComponent","on","onDestroy","off","BGMusicController_1","WaveSpawnsController_1","GameController","BGMusicController","playerController","ScoreLabel","TimerLabel","KillCount","LevelCount","Ammo","WarningLabel","enemySpawnPoints","bossSpawnPoints","pistolBullet","rifleBullet","sniperBullet","enemy","pauseMenu","upgradeMenu","pistolIcon","rifleIcon","sniperIcon","pistolBorder","rifleBorder","sniperBorder","border","waveSpawnTimer","waveSpawnTimer2","waveSpawnTimerElite","initialDelayTimer","score","timer","killCounter","waveNo","waveSpawnerController","currLevel","levelUpThreshold","isLevelingUp","pistolAmmo","defaultPistolAmmo","pistolReloadTime","pistolFirerate","isReloadingP","canFireP","pistolDamageLvl","rifleAmmo","defaultRifleAmmo","rifleReloadTime","rifleFirerate","isReloadingR","canFireR","rifleDamageLvl","sniperAmmo","defaultSniperAmmo","sniperReloadTime","sniperFirerate","isReloadingS","canFireS","sniperDamageLvl","weaponType","isMousePressed","intensifyEnemySpawns","intensifyEnemySpawns2","onKeyDown","keyCode","KEY","num1","num2","num3","p","pauseGame","onKeyUp","scoreAmt","toString","killAmt","upgradeWeaponDamageAll","upgradePistolDamage","upgradeRifleDamage","upgradeSniperDamage","resume","upgradePistolAmmo","upgradeRifleAmmo","upgradeSniperAmmo","levelUp","showLevelUpReward","pause","fireBullet","resetFirerate","bulletToFire","isPaused","name","playerPosVec2","targetPos","sub","mag","actionBy","moveTo","destroyBullet","callFunc","sequence","reloadGun","weaponNo","MousePressed","mouseEvent","MouseReleased","onMouseMove","spawnEnemy","IsBossOnField","EnemiesToSpawn","randomSpawnNO","spawnEnemy2","spawnEnemyElites","bossArrival","BossName","spawnBoss","BossToSpawn","gunType","SpawnInterval","systemEvent","SystemEvent","EventType","KEY_DOWN","KEY_UP","SpawnInterval2","SpawnIntervalElite","MinionSpawnClass","PlayerMovement_1","PlayerController","DefaultFrame","SpeedUpFrame","UpgradeSprites","setSpeedChange","HealthText","moveSpeedLvl","regenLvl","regenInterval","prevRegenInterval","moveSpeed","MoveSpeedUpgrade","RegenUpgrade","MaxHPUpgrade","RegenTimerReductionUpgrade","doHealthRegen","scheduleRegen","SpriteFrame","PlayerMovementClass","moveDirection","previousPosition","currPosition","angleDegrees","w","s","a","d","onCollisionStay","PowerupClass","SceneManagerClass","ControlsWindow","NodesToHide","LoadScene","QuitGame","game","end","OpenControlWindows","CloseControlWindow","SprRandomiser","SpritesToUse","randomSprIndex","randomSpriteFrame","Sprite","spriteFrame","UIzPosSetterClass","UItoSet","NodestoSet","UpgradeRandomiserClass","upgradesToRandomise","upgradesSP","maxUpgradesToRandomise","randomizeUpgrades","selectedIndices","randomIndex","includes","push","index","i","selectedElement","targetPosition","onEnable","WaveSpawnsController"],"mappings":"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","sourcesContent":["// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class AudioManagerClass extends cc.Component {\r\n    \r\n    // ======== Weapon Audio ========\r\n    @property({type:cc.AudioClip})\r\n    pistolShot = null;\r\n    @property({type:cc.AudioClip})\r\n    rifleShot = null;\r\n    @property({type:cc.AudioClip})\r\n    sniperShot = null;\r\n\r\n    @property({type:cc.AudioClip})\r\n    Reload = null;\r\n\r\n    // ======== Background Music ========\r\n    @property({type:cc.AudioClip})\r\n    mainMenuBG = null;\r\n    @property({type:cc.AudioClip})\r\n    level1Theme = null;\r\n    @property({type:cc.AudioClip})\r\n    boss1Theme = null;\r\n    @property({type:cc.AudioClip})\r\n    defeatedTheme = null;\r\n\r\n    // ======== Entity Audio ========\r\n    @property({type:cc.AudioClip})\r\n    enemyDeath = null;\r\n    @property({type:cc.AudioClip})\r\n    enemyMergeT1 = null;\r\n    @property({type:cc.AudioClip})\r\n    UEgrowl = null;\r\n    @property({type:cc.AudioClip})\r\n    UEspawn = null;\r\n    @property({type:cc.AudioClip})\r\n    bossIncoming = null;\r\n\r\n    // ======== Item Audio ========\r\n    @property({type:cc.AudioClip})\r\n    speedupPU = null;\r\n\r\n    // ======== Others ========\r\n    @property({type:cc.AudioClip})\r\n    bossWarning = null;\r\n    @property({type:cc.AudioClip})\r\n    levelUP = null;\r\n\r\n\r\n    public SpecialaudioId:number = null;\r\n    PlayAudioEffect(clipToPlay:cc.AudioClip, isRepeat:boolean, isFadeIn:boolean = false)\r\n    {\r\n        let audioId:number; \r\n\r\n        if(clipToPlay != this.bossIncoming)\r\n        {\r\n            audioId = cc.audioEngine.playEffect(clipToPlay, isRepeat);\r\n            \r\n            if(clipToPlay == this.pistolShot || clipToPlay == this.rifleShot || clipToPlay == this.sniperShot)\r\n                cc.audioEngine.setVolume(audioId, 0.4);\r\n            else\r\n                cc.audioEngine.setVolume(audioId, 1);\r\n        }\r\n            \r\n        else\r\n        {\r\n            audioId = cc.audioEngine.playEffect(clipToPlay, isRepeat);\r\n            this.SpecialaudioId = audioId;\r\n        }\r\n        if (isFadeIn) {\r\n            cc.audioEngine.setVolume(audioId, 0);\r\n            this.fadeInAudio(audioId, 1.5);\r\n        }\r\n        return audioId;\r\n        //cc.audioEngine.playEffect(clipToPlay, isRepeat);\r\n    }\r\n\r\n    PlayMusic(clipToPlay:cc.AudioClip, isLooped:boolean, isFadeIn:boolean = false)\r\n    {\r\n        const audioId = cc.audioEngine.playMusic(clipToPlay, isLooped);\r\n\r\n        if (isFadeIn) {\r\n            cc.audioEngine.setVolume(audioId, 0);\r\n            this.fadeInAudio(audioId, 3);\r\n        }\r\n        return audioId;\r\n        //cc.audioEngine.playMusic(clipToPlay, isLooped);\r\n    }\r\n\r\n    StopAudio(audioId: number, isFadeOut: boolean = false) {\r\n        //console.log(\"Stopping audio with ID:\", audioId, \"Fade out:\", isFadeOut);\r\n        if (isFadeOut) {\r\n            this.fadeOutAudio(audioId, 3);\r\n        } else {\r\n            cc.audioEngine.stop(audioId);\r\n        }\r\n    }\r\n\r\n    fadeInAudio(audioId: number, duration: number) {\r\n        let volumeObj = { volume: 0 };\r\n        cc.tween(volumeObj)\r\n            .to(duration, { volume: 1 }, {\r\n                onUpdate: () => {\r\n                    cc.audioEngine.setVolume(audioId, volumeObj.volume);\r\n                }\r\n            })\r\n            .start();\r\n    }\r\n    \r\n    fadeOutAudio(audioId: number, duration: number) {\r\n        let volumeObj = { volume: 1 };\r\n        cc.tween(volumeObj)\r\n            .to(duration, { volume: 0 }, {\r\n                onUpdate: () => {\r\n                    cc.audioEngine.setVolume(audioId, volumeObj.volume);\r\n                },\r\n                onComplete: () => {\r\n                    cc.audioEngine.stop(audioId);\r\n                }\r\n            })\r\n            .start();\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // onLoad () {}\r\n\r\n    start () {\r\n\r\n    }\r\n\r\n    // update (dt) {}\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport AudioManagerClass from \"./AudioManager\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class BGMusicClass extends cc.Component {\r\n\r\n    @property(AudioManagerClass)\r\n    AudioManager:AudioManagerClass = null;\r\n\r\n    @property\r\n    bgMusic:number = 0;\r\n    // onLoad () {}\r\n\r\n    public audioId = null;\r\n    start () \r\n    {\r\n        if(this.AudioManager == null)\r\n            this.AudioManager = this.node.getComponent(AudioManagerClass);\r\n\r\n        switch(this.bgMusic)\r\n        {\r\n            case 0:\r\n                this.audioId = this.AudioManager.PlayMusic(this.AudioManager.mainMenuBG, true, false);\r\n                //this.AudioManager.PlayMusic(this.AudioManager.mainMenuBG, true, false);\r\n                break;\r\n\r\n            case 1:\r\n                this.audioId = this.AudioManager.PlayMusic(this.AudioManager.level1Theme, true, false);\r\n                break;\r\n\r\n            case 2:\r\n                this.audioId = this.AudioManager.PlayMusic(this.AudioManager.defeatedTheme, true, false);\r\n                break;\r\n        }\r\n    }\r\n\r\n    // update (dt) {}\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport EnemyClass from \"./Enemy\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Boss extends cc.Component {\r\n\r\n    @property\r\n    Name:string = \"\";\r\n\r\n    @property\r\n    SpawnsMinions:boolean = false;\r\n\r\n    @property\r\n    SpawnTime:number = 0;\r\n\r\n    @property\r\n    SpawnDelay:number = 0;\r\n\r\n    @property(cc.Prefab)\r\n    MinionSpawnPrefabs:cc.Prefab[] = [];\r\n\r\n    @property(cc.Node)\r\n    MinionSpawnPoints:cc.Node[] = [];\r\n\r\n    @property(cc.ParticleSystem)\r\n    UnstableMeter:cc.ParticleSystem = null;\r\n\r\n    private enemyScript:EnemyClass;\r\n\r\n    public BossBar:cc.Node = null;\r\n\r\n    private initialSpawnFunctionSet:boolean = false;\r\n\r\n    private healthDepletionPercentage = 0;\r\n\r\n    private HeavyHealthDepletionPercentage = 0.2;\r\n\r\n    private tweenDuration = 0.2;\r\n\r\n    public damageAmtRecived:number = 0;\r\n\r\n    private isScheduled: boolean = false;\r\n\r\n    private spawnTimeUpdated: boolean = false;\r\n\r\n    private spawnTimeUpdated2: boolean = false;\r\n\r\n    scheduleMinionSpawning() {\r\n        if (this.isScheduled) {\r\n            this.unschedule(this.spawnMinions);\r\n        }\r\n        this.schedule(() => this.spawnMinions(false), this.SpawnTime, cc.macro.REPEAT_FOREVER, this.SpawnDelay);\r\n        this.isScheduled = true;\r\n    }\r\n\r\n    updateSpawnTime(newSpawnTime: number) {\r\n        this.SpawnTime = newSpawnTime;\r\n        this.scheduleMinionSpawning();\r\n    }\r\n\r\n    spawnMinions(DamageMinions:boolean = false)\r\n    {\r\n        let depleteHP = 0;\r\n\r\n        if(!DamageMinions)\r\n            depleteHP = (this.enemyScript.MaxHealth  * this.healthDepletionPercentage);\r\n        else\r\n            depleteHP = (this.enemyScript.MaxHealth * this.HeavyHealthDepletionPercentage);\r\n\r\n        if(this.Name == \"Unstable Essence\")\r\n        {\r\n            if(this.SpawnsMinions)\r\n            {\r\n                // Convert spawn points' positions to world space coordinates relative to the boss node\r\n                const spawnPoint1WorldPos = this.MinionSpawnPoints[0].convertToWorldSpaceAR(cc.v2(0, 0));\r\n                const spawnPoint2WorldPos = this.MinionSpawnPoints[1].convertToWorldSpaceAR(cc.v2(0, 0));\r\n    \r\n                let newEnemy = null\r\n                let newEnemy2 = null;\r\n                // Create new enemies\r\n                if(!DamageMinions)\r\n                {\r\n                    newEnemy = cc.instantiate(this.MinionSpawnPrefabs[0]);\r\n                    newEnemy2 = cc.instantiate(this.MinionSpawnPrefabs[0]);\r\n                }\r\n                else\r\n                {\r\n                    newEnemy = cc.instantiate(this.MinionSpawnPrefabs[1]);\r\n                    newEnemy2 = cc.instantiate(this.MinionSpawnPrefabs[1]);\r\n                }\r\n                \r\n                // Set zIndex for the minions to be lower than the boss\r\n                newEnemy.zIndex = 10;   // Arbitrary lower value for minions\r\n                newEnemy2.zIndex = 10;  // Arbitrary lower value for minions\r\n    \r\n                // Convert world space positions back to local space of the parent node of the boss\r\n                const parent = this.node.parent;\r\n                newEnemy.setPosition(parent.convertToNodeSpaceAR(spawnPoint1WorldPos));\r\n                newEnemy2.setPosition(parent.convertToNodeSpaceAR(spawnPoint2WorldPos));\r\n    \r\n                // Add new enemies to the same parent as the boss\r\n                parent.addChild(newEnemy);\r\n                parent.addChild(newEnemy2);\r\n\r\n                this.enemyScript.Damage(Math.floor(depleteHP));\r\n            }\r\n        }\r\n    }\r\n\r\n    onLoad () \r\n    {\r\n        this.node.zIndex = 100;\r\n        if(this.Name == \"Unstable Essence\")\r\n            this.scheduleMinionSpawning();\r\n            //this.schedule(() => this.spawnMinions(false), this.SpawnTime, cc.macro.REPEAT_FOREVER, this.SpawnDelay);\r\n    }\r\n\r\n    start () \r\n    {\r\n        this.enemyScript = this.getComponent(EnemyClass);\r\n        this.BossBar = cc.find(\"Canvas/BossBar\");\r\n        this.BossBar.active = true;\r\n        this.BossBar.zIndex = 1000;\r\n\r\n        if(this.Name == \"Unstable Essence\")\r\n        {\r\n            this.BossBar.getComponentInChildren(cc.Label).string = \"Unstable Essence\".toUpperCase();\r\n            this.BossBar.getComponentInChildren(cc.ProgressBar).progress = this.enemyScript.Health / this.enemyScript.MaxHealth;\r\n            this.UnstableMeter.emissionRate = 0;\r\n        }\r\n    }\r\n\r\n    update (dt) \r\n    {\r\n        this.UnstableMeter.emissionRate = (this.damageAmtRecived / 500) * 1000;\r\n\r\n        const HPprogress = this.enemyScript.Health / this.enemyScript.MaxHealth\r\n\r\n        this.BossBar.getChildByName((\"HealthAmt\")).getComponent(cc.Label).string = this.enemyScript.Health + \" / \" + this.enemyScript.MaxHealth;\r\n\r\n        cc.tween(this.BossBar.getComponentInChildren(cc.ProgressBar))\r\n                .to(this.tweenDuration, { progress: HPprogress }, { easing: 'quadInOut' })\r\n                .call(() => {\r\n                    //console.log(`Progress Bar Updated to: ${this.BossBar.getComponentInChildren(cc.ProgressBar).progress}`);\r\n                })\r\n                .start();\r\n\r\n        if(this.Name == \"Unstable Essence\")\r\n        {\r\n            if(this.damageAmtRecived >= 500)\r\n            {\r\n                this.damageAmtRecived -= 500;\r\n                this.spawnMinions(true);\r\n                \r\n                // Calculate the new scale values\r\n                const newScaleX = this.node.scaleX * 0.85;\r\n                const newScaleY = this.node.scaleY * 0.85;\r\n                \r\n                // Create a scaleTo action for smooth scaling over 0.5 seconds\r\n                const scaleAction = cc.scaleTo(0.5, newScaleX, newScaleY);\r\n                \r\n                // Run the scale action on the node\r\n                this.node.runAction(scaleAction);\r\n\r\n                this.enemyScript.MoveSpeed /= 0.80;\r\n\r\n                this.enemyScript.audioManager.PlayAudioEffect(this.enemyScript.audioManager.UEgrowl, false);\r\n                //console.log(\"Do smthin\");\r\n            }\r\n\r\n            if(this.enemyScript.Health <= this.enemyScript.MaxHealth * 0.5 && !this.spawnTimeUpdated)\r\n            {\r\n                this.updateSpawnTime(5);\r\n                this.spawnTimeUpdated = true;\r\n            }\r\n\r\n            if(this.enemyScript.Health <= this.enemyScript.MaxHealth * 0.25 && !this.spawnTimeUpdated2)\r\n            {\r\n                this.updateSpawnTime(2.5);\r\n                this.spawnTimeUpdated2 = true;\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class BulletClass extends cc.Component {\r\n\r\n    @property\r\n    bulletSpeed: number = 100; // Adjust the speed as needed\r\n\r\n    @property\r\n    bulletDamage:number = 0;\r\n\r\n    private direction: cc.Vec3 = cc.v3(0, 0, 0);\r\n\r\n    // Initialize the bullet with a direction\r\n    init(direction: cc.Vec3) {\r\n        this.direction = direction.normalize();\r\n    }\r\n\r\n    update(dt) {\r\n        // Move the bullet each frame based on the speed and direction\r\n        const moveStep = this.direction.clone().multiplyScalar(this.bulletSpeed * dt);\r\n        this.node.position = this.node.position.add(moveStep);\r\n\r\n        // Optionally, destroy the bullet if it goes off screen\r\n        if (this.node.position.x < -cc.winSize.width / 2 ||\r\n            this.node.position.x > cc.winSize.width / 2 ||\r\n            this.node.position.y < -cc.winSize.height / 2 ||\r\n            this.node.position.y > cc.winSize.height / 2) {\r\n            this.node.destroy();\r\n        }\r\n    }\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport AudioManagerClass from \"./AudioManager\";\r\nimport Boss from \"./Boss\";\r\nimport BulletClass from \"./Bullet\";\r\nimport EntityDropManagerClass from \"./EntityDropManager\";\r\nimport GameController from \"./GameController\";\r\nimport PlayerController from \"./PlayerController\";\r\nimport PowerupClass from \"./PowerupManager\";\r\nimport SceneManagerClass from \"./SceneManager\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class EnemyClass extends cc.Component {\r\n    action: cc.ActionInterval;\r\n\r\n    @property\r\n    EnemyTag:string = \"\";\r\n\r\n    @property(cc.Label)\r\n    enemyHealthText:cc.Label = null;\r\n\r\n    @property(EntityDropManagerClass)\r\n    entityDropManager:EntityDropManagerClass = null;\r\n\r\n    @property(EntityDropManagerClass)\r\n    entityDropManager2:EntityDropManagerClass = null;\r\n\r\n    @property(cc.Prefab)\r\n    mergedEnemySpawn:cc.Prefab = null;\r\n\r\n    @property(cc.Prefab)\r\n    mergedEliteEnemySpawn:cc.Prefab = null;\r\n\r\n    @property()\r\n    ChanceToSpawnElite:number = 0;\r\n\r\n    @property(cc.Node)\r\n    upgradeSprites:cc.Node[] = [];\r\n\r\n    @property\r\n    MoveSpeed:number = 0;\r\n\r\n    @property\r\n    MaxMoveSpeed:number = 0;\r\n\r\n    @property\r\n    Health:number = 0;\r\n\r\n    @property\r\n    MaxHealth:number = 0;\r\n\r\n    @property\r\n    SpawnWeight:number = 0;\r\n    /*@property\r\n    Damage:number = 0;*/\r\n\r\n    @property\r\n    DeathScore:number = 0;\r\n\r\n    @property\r\n    CorruptionPower:number = 1;\r\n\r\n    public audioManager:AudioManagerClass = null;\r\n\r\n    merged: boolean = false;\r\n    \r\n// ======== Powerup stuff ========\r\n    @property\r\n    maxSpeedUp:number = 0;\r\n    private isSpeedUp:boolean = false;\r\n\r\n\r\n    \r\n    onCollisionEnter(other,self)\r\n    {\r\n        if(other.tag == 2)\r\n        {\r\n            other.node.destroy();\r\n            this.Damage(other.node.getComponent(BulletClass).bulletDamage);\r\n            if(this.getComponent(Boss) != null)\r\n            {\r\n                this.getComponent(Boss).damageAmtRecived += other.node.getComponent(BulletClass).bulletDamage;\r\n                console.log(this.getComponent(Boss).damageAmtRecived);\r\n            }\r\n            //this.Health -= other.node.getComponent(BulletClass).bulletDamage;\r\n        }\r\n\r\n        if(other.tag == 1)\r\n        {\r\n            if(other.getComponent(PlayerController).Health <= this.Health)\r\n            {\r\n                other.getComponent(PlayerController).isGameOver = true;\r\n                cc.director.loadScene(other.getComponent(SceneManagerClass).SceneToLoad);\r\n            }\r\n\r\n            else\r\n            {\r\n                if(this.EnemyTag != \"Elite\")\r\n                    other.getComponent(PlayerController).Health -= this.Health;\r\n                else\r\n                    other.getComponent(PlayerController).Health -= this.MaxHealth;\r\n                this.node.destroy();\r\n            }\r\n        }\r\n\r\n        if(other.tag == self.tag && other.getComponent(EnemyClass).EnemyTag == self.getComponent(EnemyClass).EnemyTag && this.mergedEnemySpawn != null && (other.getComponent(EnemyClass).EnemyTag != \"Elite\" || self.getComponent(EnemyClass).EnemyTag != \"Elite\"))\r\n        {\r\n            if (this.canMerge(other, self)) {\r\n                this.mergeEnemies(other, self);\r\n            }\r\n        }\r\n\r\n        if(other.tag == 100 && !this.isSpeedUp && this.EnemyTag != \"Elite\")\r\n        {\r\n            console.log(this.EnemyTag);\r\n            this.isSpeedUp = true;\r\n            if(this.upgradeSprites[0] != null)\r\n                this.upgradeSprites[0].active = true;\r\n            if(other.node.getComponent(PowerupClass).speedBuffAmt <= this.maxSpeedUp)\r\n            {\r\n                this.MoveSpeed += other.node.getComponent(PowerupClass).speedBuffAmt;\r\n                this.scheduleOnce(() => this.resetSpeedBuff(other.node.getComponent(PowerupClass).speedBuffAmt), other.node.getComponent(PowerupClass).speedBuffTimer);\r\n            }\r\n                \r\n            else if(other.node.getComponent(PowerupClass).speedBuffAmt > this.maxSpeedUp)\r\n            {\r\n                this.MoveSpeed += this.maxSpeedUp;\r\n                this.scheduleOnce(() => this.resetSpeedBuff(this.maxSpeedUp), other.node.getComponent(PowerupClass).speedBuffTimer);\r\n            }\r\n            other.node.destroy();\r\n        }\r\n\r\n        if(other.tag == 101 && self.EnemyTag != \"Elite\")\r\n        {\r\n            this.MaxHealth += other.node.getComponent(PowerupClass).healthUpAmt;\r\n            this.Health += other.node.getComponent(PowerupClass).healthUpAmt;\r\n            other.node.destroy();\r\n        }\r\n    }\r\n\r\n    canMerge(other, self): boolean \r\n    {\r\n        const otherEnemy = other.getComponent(EnemyClass);\r\n        const selfEnemy = self.getComponent(EnemyClass);\r\n\r\n        // Check if tags match and neither enemy has been merged\r\n        return (\r\n            other.tag === self.tag &&\r\n            otherEnemy.EnemyTag === selfEnemy.EnemyTag &&\r\n            !this.merged &&\r\n            !otherEnemy.merged\r\n        );\r\n    }\r\n\r\n    mergeEnemies(other, self) {\r\n        const otherEnemy = other.getComponent(EnemyClass);\r\n        const selfEnemy = self.getComponent(EnemyClass);\r\n\r\n        // Set the merged flag for both enemies\r\n        this.merged = true;\r\n        otherEnemy.merged = true;\r\n\r\n        let mergedSpawn;\r\n        // Instantiate the merged enemy at the position of the current enemy\r\n        if(other.getComponent(EnemyClass).EnemyTag == \"EnemyBasicT1\" && (other.getComponent(EnemyClass).isSpeedUp || self.getComponent(EnemyClass).isSpeedUp))\r\n        {\r\n            mergedSpawn = cc.instantiate(this.mergedEliteEnemySpawn);\r\n        }\r\n        else\r\n        {\r\n            let chance = Math.random() * 100;\r\n            console.log(chance);\r\n            if(chance <= this.ChanceToSpawnElite && this.mergedEliteEnemySpawn != null)\r\n                mergedSpawn = cc.instantiate(this.mergedEliteEnemySpawn);\r\n            else\r\n                mergedSpawn = cc.instantiate(this.mergedEnemySpawn);\r\n        }\r\n            \r\n        \r\n        mergedSpawn.setPosition(this.node.x, this.node.y);\r\n        this.node.parent.addChild(mergedSpawn);\r\n\r\n        this.audioManager.PlayAudioEffect(this.audioManager.enemyMergeT1, false, false);\r\n        // Destroy both original enemies\r\n        this.node.destroy();\r\n        other.node.destroy();\r\n    }\r\n\r\n    Damage(DamageAmt:number)\r\n    {\r\n        this.Health -= DamageAmt;\r\n    }\r\n\r\n    Heal(HealAmt:number)\r\n    {\r\n        this.Health += HealAmt;\r\n    }\r\n\r\n    onLoad() {\r\n        // Initialization logic if needed\r\n        var manager = cc.director.getCollisionManager();\r\n        manager.enabled = true;\r\n        this.node.zIndex = 99;\r\n        cc.director.preloadScene(\"Game\");\r\n    }\r\n\r\n    moveTowardsPlayer(deltaTime: number) {\r\n        const playerNode = cc.find('Canvas/Player');\r\n        if (!playerNode) {\r\n            \r\n            console.error('Player node not found');\r\n            return;\r\n        }\r\n\r\n        const playerPos = playerNode.position;\r\n        const direction = playerPos.subtract(this.node.position).normalize();\r\n        const speed = this.MoveSpeed; // Adjust speed as needed\r\n\r\n        this.node.position = this.node.position.add(direction.mul(speed * deltaTime));\r\n    }\r\n\r\n    rotateTowardsPlayer() {\r\n        const playerNode = this.node.parent.getChildByName('Player');\r\n        if (!playerNode) {\r\n            console.error('Player node not found');\r\n            return;\r\n        }\r\n\r\n        const playerPos = playerNode.position;\r\n        const enemyPos = this.node.position;\r\n        const direction = playerPos.subtract(enemyPos);\r\n        const angleRadians = Math.atan2(direction.y, direction.x);\r\n        const angleDegrees = cc.misc.radiansToDegrees(angleRadians);\r\n        const adjustedAngle = angleDegrees - 90;\r\n\r\n        this.node.angle = adjustedAngle;\r\n    }\r\n    \r\n    resetSpeedBuff(speedChange:number) {\r\n        this.MoveSpeed -= speedChange;\r\n        this.isSpeedUp = false;\r\n\r\n        if(this.upgradeSprites[0] != null)\r\n            this.upgradeSprites[0].active = false;\r\n    }\r\n\r\n    start()\r\n    {\r\n        this.audioManager = this.node.parent.getComponentInChildren(AudioManagerClass);\r\n        var randomSpeeds = Math.floor(Math.random() * (this.MaxMoveSpeed - this.MoveSpeed) + this.MoveSpeed)\r\n        this.MoveSpeed = randomSpeeds;\r\n\r\n        if(this.EnemyTag != \"Elite\" && this.upgradeSprites[0] != null)\r\n        {\r\n            this.upgradeSprites.forEach(element => {\r\n                element.active = false;\r\n            });\r\n        }\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n        this.moveTowardsPlayer(deltaTime);\r\n        this.rotateTowardsPlayer();\r\n        this.enemyHealthText.string = this.Health.toFixed(1);\r\n\r\n        if(this.Health <= 0)\r\n        {\r\n            if(this.getComponent(Boss) != null)\r\n            {\r\n                this.node.parent.getComponent(GameController).BossDefeated();\r\n                this.getComponent(Boss).BossBar.active = false;\r\n            }\r\n            if(this.entityDropManager != null)\r\n            {\r\n                this.entityDropManager.dropItems();\r\n            }\r\n            if(this.entityDropManager2 != null)\r\n            {\r\n                this.entityDropManager2.dropItems();\r\n            }\r\n            this.node.parent.getComponent(GameController).addScore(this.DeathScore);\r\n\r\n            this.node.parent.getComponent(GameController).addKills(this.CorruptionPower);\r\n            this.audioManager.PlayAudioEffect(this.audioManager.enemyDeath, false, false);\r\n            this.node.destroy();\r\n        }\r\n    }\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class EntityDropManagerClass extends cc.Component {\r\n\r\n    @property(cc.Node)\r\n    itemDropPoints:cc.Node[] = [];\r\n\r\n    @property({ type: cc.Float, min: 0, max: 100, step: 1 })\r\n    ItemDropChance: number = 0;\r\n    \r\n    @property\r\n    RandomItemDrop: boolean = false;\r\n\r\n    @property(cc.Prefab)\r\n    ItemsToDrop:cc.Prefab[] = [];\r\n\r\n    dropItems()\r\n    {\r\n        var dropItemChance = Math.floor(Math.random() * 101);\r\n\r\n        if(dropItemChance <= this.ItemDropChance)\r\n        {\r\n            //Do item drop\r\n            if(this.ItemsToDrop.length > 1)\r\n            {\r\n                var droppedItemType = Math.floor(Math.random() * this.ItemsToDrop.length);\r\n                var droppedItem = cc.instantiate(this.ItemsToDrop[droppedItemType]);\r\n            }\r\n            else \r\n            {\r\n                var droppedItem = cc.instantiate(this.ItemsToDrop[0]);\r\n            }\r\n\r\n            let worldPos = this.itemDropPoints[0].convertToWorldSpaceAR(cc.v2(0, 0));\r\n            let localPos = this.node.parent.convertToNodeSpaceAR(worldPos);\r\n            droppedItem.setPosition(localPos);\r\n            //droppedItem.setPosition(this.itemDropPoints[0].convertToNodeSpaceAR(this.itemDropPoints[0].x), this.itemDropPoints[0].y);\r\n            this.node.parent.addChild(droppedItem);\r\n        }\r\n    }\r\n\r\n    onLoad () {\r\n\r\n    }\r\n\r\n    start () {\r\n\r\n    }\r\n\r\n    update (dt) {\r\n\r\n    }\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class FireBulletClass extends cc.Component {\r\n\r\n    @property(cc.Prefab)\r\n    bullet:cc.Prefab = null;\r\n\r\n    @property\r\n    posX:number = 0;\r\n    posY:number = 0;\r\n\r\n    spawnBullet(event) {\r\n            // Get player's position in world space\r\n        const playerPos = this.node.parent.convertToWorldSpaceAR(this.node.position);\r\n        \r\n            // Create a new bullet and set its position to the player's position\r\n        const newBullet = cc.instantiate(this.bullet);\r\n        newBullet.setPosition(playerPos);\r\n        this.node.parent.addChild(newBullet);\r\n\r\n        // Get mouse position in world space and convert to node space\r\n        const mousePos = event.getLocation();\r\n        const worldMousePos = this.node.parent.convertToNodeSpaceAR(mousePos);\r\n\r\n        // Calculate direction\r\n        const direction = cc.v3(worldMousePos.x, worldMousePos.y, 0).subtract(newBullet.position);\r\n\r\n        // Get the Bullet component and initialize it with the direction\r\n        const bulletComponent = newBullet.getComponent('Bullet');\r\n        if (bulletComponent) {\r\n            bulletComponent.init(direction);\r\n        }\r\n    }\r\n\r\n    onLoad() {\r\n        this.node.parent.on('mousedown', this.spawnBullet, this);\r\n    }\r\n\r\n    onDestroy() {\r\n        this.node.parent.off('mousedown', this.spawnBullet, this);\r\n    }\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport AudioManagerClass from \"./AudioManager\";\r\nimport BGMusicClass from \"./BGMusicController\";\r\nimport BulletClass from \"./Bullet\";\r\nimport PlayerController from \"./PlayerController\";\r\nimport WaveSpawnsController from \"./WaveSpawnsController\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class GameController extends cc.Component {\r\n\r\n    @property(AudioManagerClass)\r\n    AudioManager:AudioManagerClass = null;\r\n\r\n    @property(BGMusicClass)\r\n    BGMusicController:BGMusicClass = null;\r\n\r\n    @property(PlayerController)\r\n    playerController:PlayerController = null;\r\n\r\n    @property(cc.Label)\r\n    ScoreLabel:cc.Label = null;\r\n\r\n    @property(cc.Label)\r\n    TimerLabel:cc.Label = null;\r\n\r\n    @property(cc.Label)\r\n    KillCount:cc.Label = null;\r\n\r\n    @property(cc.Label)\r\n    LevelCount:cc.Label = null;\r\n\r\n    @property(cc.Label)\r\n    Ammo:cc.Label = null;\r\n\r\n    @property(cc.Label)\r\n    WarningLabel:cc.Label = null;\r\n\r\n    @property(cc.Node)\r\n    enemySpawnPoints:cc.Vec2[] = [];\r\n\r\n    @property(cc.Node)\r\n    bossSpawnPoints:cc.Vec2[] = [];\r\n\r\n    @property(cc.Prefab)\r\n    pistolBullet:cc.Prefab = null;\r\n\r\n    @property(cc.Prefab)\r\n    rifleBullet:cc.Prefab = null;\r\n\r\n    @property(cc.Prefab)\r\n    sniperBullet:cc.Prefab = null;\r\n\r\n    @property(cc.Prefab)\r\n    enemy:cc.Prefab = null;\r\n\r\n    @property(cc.Node)\r\n    pauseMenu:cc.Node = null;\r\n    \r\n    @property(cc.Node)\r\n    upgradeMenu:cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    pistolIcon:cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    rifleIcon:cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    sniperIcon:cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    pistolBorder:cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    rifleBorder:cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    sniperBorder:cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    border:cc.Node = null;\r\n\r\n    @property\r\n    posX:number = 0;\r\n    posY:number = 0;\r\n\r\n    @property\r\n    bulletSpeed:number = 0;\r\n\r\n    @property\r\n    waveSpawnTimer:number = 3;\r\n\r\n    @property\r\n    waveSpawnTimer2:number = 3;\r\n\r\n    @property\r\n    waveSpawnTimerElite:number = 3;\r\n\r\n    @property\r\n    initialDelayTimer:number = 0;\r\n\r\n    @property\r\n    score:number = 0;\r\n\r\n    @property\r\n    timer:number = 0;\r\n\r\n    @property\r\n    killCounter:number = 0;\r\n\r\n    @property\r\n    waveNo:number = 0;\r\n\r\n    @property(WaveSpawnsController)\r\n    waveSpawnerController:WaveSpawnsController = null;\r\n\r\n    private currLevel:number = 0;\r\n\r\n    public levelUpThreshold:number = 3;\r\n\r\n    isLevelingUp:boolean = false;\r\n\r\n    // ======== Weapon Ammo / Reload time / Firerate time ========\r\n    @property\r\n    pistolAmmo: number = 16\r\n    @property\r\n    defaultPistolAmmo: number = 16\r\n    @property\r\n    pistolReloadTime: number = 0.35;\r\n    @property\r\n    pistolFirerate: number = 0.35;\r\n    @property\r\n    isReloadingP: boolean = false;\r\n    @property\r\n    canFireP: boolean = true;\r\n\r\n    private pistolDamageLvl = 0;\r\n\r\n    @property\r\n    rifleAmmo: number = 30;\r\n    @property\r\n    defaultRifleAmmo: number = 16\r\n    @property\r\n    rifleReloadTime: number = 1.5;\r\n    @property\r\n    rifleFirerate: number = 0.2;\r\n    @property\r\n    isReloadingR: boolean = false;\r\n    @property\r\n    canFireR: boolean = true;\r\n\r\n    private rifleDamageLvl = 0;\r\n\r\n    @property\r\n    sniperAmmo: number = 5;\r\n    @property\r\n    defaultSniperAmmo: number = 16\r\n    @property\r\n    sniperReloadTime: number = 3.5;\r\n    @property\r\n    sniperFirerate: number = 3;\r\n    @property\r\n    isReloadingS: boolean = false;\r\n    @property\r\n    canFireS: boolean = true;\r\n\r\n    private sniperDamageLvl = 0;\r\n\r\n    private weaponType:number = 1;\r\n\r\n    private isMousePressed:boolean = false;\r\n\r\n    private mouseEvent: null;\r\n\r\n    private mousePos = cc.v2(0, 0);\r\n\r\n    private intensifyEnemySpawns:boolean = false;\r\n\r\n    private intensifyEnemySpawns2:boolean = false;\r\n\r\n\r\n    onKeyDown(event) {\r\n        switch (event.keyCode) {\r\n            case cc.macro.KEY.num1:\r\n            case cc.macro.KEY['1']:\r\n                this.weaponType = 1;\r\n                //this.scheduleOnce(() => this.spawnEnemy());\r\n                break;\r\n            case cc.macro.KEY.num2:\r\n            case cc.macro.KEY['2']:\r\n                this.weaponType = 2;\r\n                break; \r\n            case cc.macro.KEY.num3:\r\n            case cc.macro.KEY['3']:\r\n                this.weaponType = 3;\r\n                break;\r\n\r\n            case cc.macro.KEY.p:\r\n                this.pauseGame();\r\n                break;\r\n        }\r\n    }\r\n\r\n    onKeyUp(event) {\r\n        \r\n    }\r\n\r\n    addScore(scoreAmt:number)\r\n    {\r\n        this.score += scoreAmt;\r\n        this.ScoreLabel.string = \"Score: \" + this.score.toString();\r\n    }\r\n\r\n    addKills(killAmt:number)\r\n    {\r\n        this.killCounter += killAmt;\r\n        this.KillCount.string = \"Corrupt.Pwr Nullified: \" + this.killCounter.toString();\r\n    }\r\n\r\n    upgradeWeaponDamageAll()\r\n    {\r\n        this.upgradePistolDamage();\r\n        this.upgradeRifleDamage();\r\n        this.upgradeSniperDamage();\r\n    }\r\n\r\n    upgradePistolDamage()\r\n    {\r\n        this.pistolDamageLvl++;\r\n        this.AudioManager.PlayAudioEffect(this.AudioManager.levelUP, false, false);\r\n        this.upgradeMenu.active = false;\r\n        cc.director.resume();\r\n    }\r\n\r\n    upgradeRifleDamage()\r\n    {\r\n        this.rifleDamageLvl++;\r\n        this.AudioManager.PlayAudioEffect(this.AudioManager.levelUP, false, false);\r\n        this.upgradeMenu.active = false;\r\n        cc.director.resume();\r\n    }\r\n\r\n    upgradeSniperDamage()\r\n    {\r\n        this.sniperDamageLvl++;\r\n        this.AudioManager.PlayAudioEffect(this.AudioManager.levelUP, false, false);\r\n        this.upgradeMenu.active = false;\r\n        cc.director.resume();\r\n    }\r\n\r\n    upgradePistolAmmo()\r\n    {\r\n        this.defaultPistolAmmo += 2;\r\n        this.pistolAmmo += 2;\r\n        this.AudioManager.PlayAudioEffect(this.AudioManager.levelUP, false, false);\r\n        this.upgradeMenu.active = false;\r\n        cc.director.resume();\r\n    }\r\n\r\n    upgradeRifleAmmo()\r\n    {\r\n        this.defaultRifleAmmo += 5;\r\n        this.rifleAmmo += 5;\r\n        this.AudioManager.PlayAudioEffect(this.AudioManager.levelUP, false, false);\r\n        this.upgradeMenu.active = false;\r\n        cc.director.resume();\r\n    }\r\n\r\n    upgradeSniperAmmo()\r\n    {\r\n        this.defaultSniperAmmo += 1;\r\n        this.sniperAmmo += 1;\r\n        this.AudioManager.PlayAudioEffect(this.AudioManager.levelUP, false, false);\r\n        this.upgradeMenu.active = false;\r\n        cc.director.resume();\r\n    }\r\n\r\n    levelUp()\r\n    {\r\n        switch(this.currLevel)\r\n        {\r\n            case 0:\r\n                this.levelUpThreshold = 5\r\n                break;\r\n            case 1:\r\n                this.levelUpThreshold = 11\r\n                break;\r\n            case 2:\r\n                this.levelUpThreshold = 18\r\n                break;\r\n            case 3:\r\n                this.levelUpThreshold = 26\r\n                break;\r\n            case 4:\r\n                this.levelUpThreshold = 35\r\n                break;\r\n            case 5:\r\n                this.levelUpThreshold = 45\r\n                break;\r\n            case 6:\r\n                this.levelUpThreshold = 56\r\n                break;\r\n            case 7:\r\n                this.levelUpThreshold = 68\r\n                break;\r\n            case 8:\r\n                this.levelUpThreshold = 81\r\n                break;\r\n            case 9:\r\n                this.levelUpThreshold = 95\r\n                break;\r\n            case 10:\r\n                this.levelUpThreshold = 110\r\n                break;\r\n            case 11:\r\n                this.levelUpThreshold = 126\r\n                break;\r\n            case 12:\r\n                this.levelUpThreshold = 143\r\n                break;\r\n            case 13:\r\n                this.levelUpThreshold = 161\r\n                break;\r\n            case 14:\r\n                this.levelUpThreshold = 180\r\n                break;\r\n            case 15:\r\n                this.levelUpThreshold = 200\r\n                break;\r\n            case 16:\r\n                this.levelUpThreshold = 250\r\n                break;\r\n            case 17:\r\n                this.levelUpThreshold = 300\r\n                break;\r\n            case 18:\r\n                this.levelUpThreshold = 350\r\n                break;\r\n            case 19:\r\n                this.levelUpThreshold = 400\r\n                break;\r\n            case 20:\r\n                this.levelUpThreshold = 500\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.currLevel++;\r\n        this.isLevelingUp = false;\r\n        this.LevelCount.string = \"Level: \" + this.currLevel;\r\n        this.showLevelUpReward();\r\n    }\r\n\r\n    showLevelUpReward()\r\n    {\r\n        cc.director.pause();\r\n        this.upgradeMenu.active = true;\r\n    }\r\n\r\n    fireBullet(event)\r\n    {\r\n        switch (this.weaponType)\r\n        {\r\n            case 1:\r\n                if(this.pistolAmmo > 0 && this.canFireP)\r\n                {\r\n                    this.spawnBullet(event, this.pistolBullet, this.mousePos);\r\n                    this.pistolAmmo--;\r\n                    this.canFireP = false;\r\n                    this.scheduleOnce(() => this.resetFirerate(1), this.pistolFirerate);\r\n                }\r\n                break;\r\n            case 2:\r\n                if(this.rifleAmmo > 0 && this.canFireR)\r\n                {\r\n                    this.spawnBullet(event, this.rifleBullet, this.mousePos);\r\n                    this.rifleAmmo--;\r\n                    this.canFireR = false;\r\n                    this.scheduleOnce(() => this.resetFirerate(2), this.rifleFirerate);\r\n                }\r\n                break;\r\n            case 3:\r\n                if(this.sniperAmmo > 0 && this.canFireS)\r\n                {\r\n                    this.spawnBullet(event, this.sniperBullet, this.mousePos);\r\n                    this.sniperAmmo--;\r\n                    this.canFireS = false;\r\n                    this.scheduleOnce(() => this.resetFirerate(3), this.sniperFirerate);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    spawnBullet(event, bulletToFire:cc.Prefab, mousePos)\r\n    {\r\n        if(!cc.director.isPaused())\r\n        {\r\n            var newBullet = null;\r\n            newBullet = cc.instantiate(bulletToFire);\r\n            \r\n            var playerPos = this.node.getChildByName('Player').position;\r\n            newBullet.setPosition(playerPos.x, playerPos.y);\r\n\r\n            var bulletDamage = newBullet.getComponent(BulletClass).bulletDamage;\r\n\r\n            switch(bulletToFire.name)\r\n            {\r\n                case \"Pistol Bullet\":\r\n                    if(this.pistolDamageLvl > 0)\r\n                    {\r\n                        newBullet.getComponent(BulletClass).bulletDamage += bulletDamage * (this.pistolDamageLvl * 0.25);\r\n                        //console.log(bulletDamage);\r\n                    }\r\n                    break;\r\n\r\n                case \"Rifle Bullet\":\r\n                    if(this.rifleDamageLvl > 0)\r\n                    {\r\n                        newBullet.getComponent(BulletClass).bulletDamage += bulletDamage * (this.rifleDamageLvl * 0.25);\r\n                    }\r\n                    break;\r\n\r\n                case \"Sniper Bullet\":\r\n                    if(this.sniperDamageLvl > 0)\r\n                    {\r\n                        newBullet.getComponent(BulletClass).bulletDamage += bulletDamage * (this.sniperDamageLvl * 0.25);\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            this.node.addChild(newBullet);\r\n\r\n            console.log(newBullet.getComponent(BulletClass).bulletDamage);\r\n\r\n            /*var mousePos = event.getLocation();\r\n            mousePos = this.node.convertToNodeSpaceAR(mousePos);*/\r\n\r\n            this.posX = mousePos.x;\r\n            this.posY = mousePos.y;\r\n\r\n            var playerPosVec2 = cc.v2(playerPos.x, playerPos.y);\r\n            var targetPos = cc.v2(this.posX, this.posY);\r\n    \r\n            // Calculate the distance between the player and the target position\r\n            var distance = playerPosVec2.sub(targetPos).mag();\r\n\r\n            // Define the bullet's speed (units per second)\r\n            var bulletSpeed = newBullet.getComponent(BulletClass).bulletSpeed; // Adjust the speed value as needed\r\n\r\n            // Calculate the duration based on the distance and speed\r\n            var duration = distance / bulletSpeed;\r\n\r\n            var actionBy = cc.moveTo(duration, targetPos);\r\n            var destroyBullet = cc.callFunc(function(){\r\n                newBullet.destroy();\r\n            }, this);\r\n\r\n            var sequence = cc.sequence(actionBy, destroyBullet);\r\n            newBullet.runAction(sequence);\r\n\r\n            switch (this.weaponType)\r\n            {\r\n                case 1:\r\n                    this.AudioManager.PlayAudioEffect(this.AudioManager.pistolShot, false, false);\r\n                    break;\r\n                case 2:\r\n                    this.AudioManager.PlayAudioEffect(this.AudioManager.rifleShot, false, false);\r\n                    break;\r\n                case 3:\r\n                    this.AudioManager.PlayAudioEffect(this.AudioManager.sniperShot, false, false);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    reloadGun(weaponNo: number)\r\n    {\r\n        switch(weaponNo)\r\n        {\r\n            case 1:\r\n                this.pistolAmmo = this.defaultPistolAmmo;\r\n                this.isReloadingP = false;\r\n                break;\r\n\r\n            case 2:\r\n                this.rifleAmmo = this.defaultRifleAmmo;\r\n                this.isReloadingR = false;\r\n                break;\r\n\r\n            case 3:\r\n                this.sniperAmmo = this.defaultSniperAmmo;\r\n                this.isReloadingS = false;\r\n                break;\r\n        }\r\n    }\r\n\r\n    MousePressed(event)\r\n    {\r\n        this.isMousePressed = true;\r\n        this.mouseEvent = event;\r\n    }\r\n\r\n    MouseReleased(event)\r\n    {\r\n        this.isMousePressed = false;\r\n        this.mouseEvent = null;\r\n    }\r\n\r\n    onMouseMove(event) \r\n    {\r\n        this.mousePos = this.node.convertToNodeSpaceAR(event.getLocation());\r\n    }\r\n\r\n    spawnEnemy()\r\n    {\r\n        if(!this.waveSpawnerController.IsBossOnField)\r\n        {\r\n            if(this.timer < 75)\r\n            {\r\n                var newEnemy = cc.instantiate(this.waveSpawnerController.EnemiesToSpawn[0]);\r\n            }\r\n            else if(this.timer >= 75 && this.timer < 150)\r\n            {\r\n                var randomSpawnNO = Math.floor(Math.random() * 2);\r\n                var newEnemy = cc.instantiate(this.waveSpawnerController.EnemiesToSpawn[randomSpawnNO]);\r\n            }\r\n            else if(this.timer >= 150)\r\n            {\r\n                var randomSpawnNO = Math.floor(Math.random() * 3);\r\n                var newEnemy = cc.instantiate(this.waveSpawnerController.EnemiesToSpawn[randomSpawnNO]);\r\n            }\r\n            /*var enemySpawnPositions = [\r\n                cc.v2(-780, -420), cc.v2(720, -420), cc.v2(720, 385), cc.v2(-695, 385)\r\n            ];*/\r\n            var enemyPos = Math.floor(Math.random() * this.enemySpawnPoints.length);\r\n            newEnemy.setPosition(this.enemySpawnPoints[enemyPos].x, this.enemySpawnPoints[enemyPos].y);\r\n            this.node.addChild(newEnemy);\r\n        }\r\n        else\r\n         console.log(\"Boss on field, spawning has been paused\");\r\n    }\r\n\r\n    spawnEnemy2()\r\n    {\r\n        if(!this.waveSpawnerController.IsBossOnField)\r\n        {\r\n            if(this.timer < 150)\r\n            {\r\n                var newEnemy = cc.instantiate(this.waveSpawnerController.EnemiesToSpawn[0]);\r\n            }\r\n            else if(this.timer >= 150)\r\n            {\r\n                var randomSpawnNO = Math.floor(Math.random() * 2);\r\n                var newEnemy = cc.instantiate(this.waveSpawnerController.EnemiesToSpawn[randomSpawnNO]);\r\n            }\r\n            /*var enemySpawnPositions = [\r\n                cc.v2(-780, -420), cc.v2(720, -420), cc.v2(720, 385), cc.v2(-695, 385)\r\n            ];*/\r\n            var enemyPos = Math.floor(Math.random() * this.enemySpawnPoints.length);\r\n            newEnemy.setPosition(this.enemySpawnPoints[enemyPos].x, this.enemySpawnPoints[enemyPos].y);\r\n            this.node.addChild(newEnemy);\r\n        }\r\n        else\r\n         console.log(\"Boss on field, spawning has been paused\");\r\n    }\r\n\r\n    spawnEnemyElites()\r\n    {\r\n        if(!this.waveSpawnerController.IsBossOnField)\r\n        {\r\n            var randomSpawnNO = Math.floor(Math.random() * 5);\r\n            while(randomSpawnNO < 3)\r\n            {\r\n                randomSpawnNO = Math.floor(Math.random() * 5);\r\n            }\r\n\r\n            var newEnemy = cc.instantiate(this.waveSpawnerController.EnemiesToSpawn[randomSpawnNO]);\r\n            var enemyPos = Math.floor(Math.random() * this.enemySpawnPoints.length);\r\n            newEnemy.setPosition(this.enemySpawnPoints[enemyPos].x, this.enemySpawnPoints[enemyPos].y);\r\n            this.node.addChild(newEnemy);\r\n        }\r\n        else\r\n         console.log(\"Boss on field, spawning has been paused\");\r\n    }\r\n\r\n    bossArrival(BossName:string)\r\n    {\r\n        this.waveSpawnerController.IsBossOnField = true;\r\n        this.WarningLabel.enabled = true;\r\n        this.AudioManager.PlayAudioEffect(this.AudioManager.bossWarning, false, false);\r\n        \r\n        if(this.BGMusicController.audioId != null)\r\n            this.AudioManager.StopAudio(this.BGMusicController.audioId, true);\r\n\r\n        this.scheduleOnce(() => {\r\n            this.AudioManager.PlayAudioEffect(this.AudioManager.bossIncoming, false, true);\r\n        }, 2.5);\r\n\r\n        this.scheduleOnce(() => this.spawnBoss(BossName), 13);\r\n    }\r\n\r\n    spawnBoss(BossName:string)\r\n    {\r\n        console.log(this.AudioManager.SpecialaudioId);\r\n        if(this.AudioManager.SpecialaudioId != null)\r\n            this.AudioManager.StopAudio(this.AudioManager.SpecialaudioId, false);\r\n\r\n        this.AudioManager.PlayMusic(this.AudioManager.boss1Theme, true, false);\r\n\r\n        this.WarningLabel.enabled = false;\r\n        if(BossName == \"Unstable Essence\")\r\n        {\r\n            var newEnemy = cc.instantiate(this.waveSpawnerController.BossToSpawn[0]);\r\n            this.AudioManager.PlayAudioEffect(this.AudioManager.UEspawn, false, false);\r\n        }\r\n            \r\n\r\n        var enemyPos = Math.floor(Math.random() * this.bossSpawnPoints.length);\r\n        newEnemy.setPosition(this.bossSpawnPoints[enemyPos].x, this.bossSpawnPoints[enemyPos].y);\r\n        this.node.addChild(newEnemy);\r\n    }\r\n\r\n    pauseGame()\r\n    {\r\n        if(!this.upgradeMenu.active && !this.playerController.isGameOver)\r\n        {\r\n            if(cc.director.isPaused())\r\n            {\r\n                cc.director.resume();\r\n                this.pauseMenu.active = false;\r\n            }\r\n                \r\n            else if(!cc.director.isPaused())\r\n            {\r\n                cc.director.pause();\r\n                this.pauseMenu.active = true;\r\n            } \r\n        }\r\n    }\r\n\r\n    resetFirerate(gunType: number)\r\n    {\r\n        switch (gunType)\r\n        {\r\n            case 1:\r\n                this.canFireP = true;\r\n                break;\r\n            case 2:\r\n                this.canFireR = true;\r\n                break;\r\n            case 3:\r\n                this.canFireS = true;\r\n                break;\r\n        }\r\n    }\r\n    \r\n    BossDefeated()\r\n    {\r\n        this.waveSpawnerController.IsBossOnField = false;\r\n    }\r\n\r\n    onLoad () {\r\n        this.node.on('mousedown', this.MousePressed, this);\r\n        this.node.on('mouseup', this.MouseReleased, this);\r\n        this.node.on('mousemove', this.onMouseMove, this);\r\n\r\n        this.schedule(this.spawnEnemy, this.waveSpawnerController.SpawnInterval, cc.macro.REPEAT_FOREVER, this.initialDelayTimer);\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\r\n    }\r\n    onDestroy() {\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\r\n    }\r\n    \r\n    start () \r\n    {\r\n        if(this.AudioManager == null)\r\n            this.AudioManager = this.node.parent.getComponent(AudioManagerClass);\r\n\r\n        this.ScoreLabel.string = \"Score: \" + this.score.toString();\r\n        this.pauseMenu.active = false;\r\n        this.upgradeMenu.active = false;\r\n\r\n        this.pistolIcon.active = false;\r\n        this.rifleIcon.active = false;\r\n        this.sniperIcon.active = false;\r\n\r\n        this.WarningLabel.enabled = false;\r\n    }\r\n\r\n    update (dt) {\r\n\r\n        if(this.timer >= 60 && !this.intensifyEnemySpawns)\r\n        {\r\n            this.schedule(this.spawnEnemy2, this.waveSpawnerController.SpawnInterval2, cc.macro.REPEAT_FOREVER, this.initialDelayTimer);\r\n            this.waveSpawnerController.SpawnInterval -= 0.15;\r\n            this.intensifyEnemySpawns = true;\r\n            this.schedule(this.spawnEnemy, this.waveSpawnerController.SpawnInterval, cc.macro.REPEAT_FOREVER, this.initialDelayTimer);\r\n        }\r\n\r\n        if(this.timer >= 150 && !this.intensifyEnemySpawns2)\r\n        {\r\n            this.schedule(this.spawnEnemyElites, this.waveSpawnerController.SpawnIntervalElite, cc.macro.REPEAT_FOREVER, this.initialDelayTimer);\r\n            this.waveSpawnerController.SpawnInterval -= 0.25;\r\n            this.schedule(this.spawnEnemy, this.waveSpawnerController.SpawnInterval, cc.macro.REPEAT_FOREVER, this.initialDelayTimer);\r\n            this.waveSpawnerController.SpawnInterval2 -= 0.25;\r\n            this.schedule(this.spawnEnemy2, this.waveSpawnerController.SpawnInterval, cc.macro.REPEAT_FOREVER, this.initialDelayTimer);\r\n            this.intensifyEnemySpawns2 = true;\r\n        }\r\n\r\n        if(this.isMousePressed)\r\n        {\r\n            this.fireBullet(this.mouseEvent);\r\n        }\r\n\r\n        //this.node.on('mousedown', this.fireBullet, this);\r\n\r\n        this.timer += dt;\r\n        this.TimerLabel.string = \"Time Survived: \" + this.timer.toFixed(1);\r\n\r\n        if(this.score >= 500 && !this.waveSpawnerController.IsBossOnField)\r\n        {\r\n            this.bossArrival(\"Unstable Essence\");\r\n        }\r\n\r\n        if(this.pistolAmmo <= 0 && this.isReloadingP == false)\r\n        {\r\n            this.isReloadingP = true;\r\n            this.AudioManager.PlayAudioEffect(this.AudioManager.Reload, false, false);\r\n            this.scheduleOnce(() => this.reloadGun(1), this.pistolReloadTime);\r\n        }\r\n        if(this.rifleAmmo <= 0 && this.isReloadingR == false)\r\n        {\r\n            this.isReloadingR = true;\r\n            this.AudioManager.PlayAudioEffect(this.AudioManager.Reload, false, false);\r\n            this.scheduleOnce(() => this.reloadGun(2), this.rifleReloadTime);\r\n        }\r\n        if(this.sniperAmmo <= 0 && this.isReloadingS == false)\r\n        {\r\n            this.isReloadingS = true;\r\n            this.AudioManager.PlayAudioEffect(this.AudioManager.Reload, false, false);\r\n            this.scheduleOnce(() => this.reloadGun(3), this.sniperReloadTime);\r\n        }\r\n\r\n\r\n        switch(this.weaponType)\r\n        {\r\n            case 1:\r\n                this.Ammo.string = this.pistolAmmo + \" / \" + this.defaultPistolAmmo;\r\n                this.border.position = this.pistolBorder.position;\r\n                this.rifleIcon.active = false;\r\n                this.sniperIcon.active = false;\r\n                this.pistolIcon.active = true;\r\n                break;\r\n\r\n            case 2:\r\n                this.Ammo.string = this.rifleAmmo + \" / \" + this.defaultRifleAmmo;\r\n                this.border.position = this.rifleBorder.position;\r\n                this.pistolIcon.active = false;\r\n                this.sniperIcon.active = false;\r\n                this.rifleIcon.active = true;\r\n                break;\r\n\r\n            case 3:\r\n                this.Ammo.string = this.sniperAmmo + \" / \" + this.defaultSniperAmmo;\r\n                this.border.position = this.sniperBorder.position;\r\n                this.pistolIcon.active = false;\r\n                this.rifleIcon.active = false;\r\n                this.sniperIcon.active = true;\r\n                break;\r\n        }\r\n\r\n        if(this.killCounter >= this.levelUpThreshold && this.isLevelingUp === false)\r\n        {\r\n            this.isLevelingUp = true;\r\n            this.levelUp();\r\n        }\r\n    }\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class MinionSpawnClass extends cc.Component {\r\n\r\n    @property\r\n    SpawnsMinions:boolean = true;\r\n\r\n    @property\r\n    SpawnTime:number = 0;\r\n\r\n    @property\r\n    SpawnDelay:number = 0;\r\n\r\n    @property(cc.Prefab)\r\n    MinionSpawnPrefabs:cc.Prefab[] = [];\r\n\r\n    @property(cc.Node)\r\n    MinionSpawnPoints:cc.Node[] = [];\r\n\r\n    spawnMinions()\r\n    {\r\n        if(this.SpawnsMinions)\r\n        {\r\n            // Convert spawn points' positions to world space coordinates relative to the boss node\r\n            const spawnPoint1WorldPos = this.MinionSpawnPoints[0].convertToWorldSpaceAR(cc.v2(0, 0));\r\n            const spawnPoint2WorldPos = this.MinionSpawnPoints[1].convertToWorldSpaceAR(cc.v2(0, 0));\r\n\r\n            let newEnemy = null\r\n            let newEnemy2 = null;\r\n            // Create new enemies\r\n            newEnemy = cc.instantiate(this.MinionSpawnPrefabs[0]);\r\n            newEnemy2 = cc.instantiate(this.MinionSpawnPrefabs[0]);\r\n            \r\n            // Set zIndex for the minions to be lower than the boss\r\n            newEnemy.zIndex = 10;   // Arbitrary lower value for minions\r\n            newEnemy2.zIndex = 10;  // Arbitrary lower value for minions\r\n\r\n            // Convert world space positions back to local space of the parent node of the boss\r\n            const parent = this.node.parent;\r\n            newEnemy.setPosition(parent.convertToNodeSpaceAR(spawnPoint1WorldPos));\r\n            newEnemy2.setPosition(parent.convertToNodeSpaceAR(spawnPoint2WorldPos));\r\n\r\n            // Add new enemies to the same parent as the boss\r\n            parent.addChild(newEnemy);\r\n            parent.addChild(newEnemy2);\r\n        }\r\n    }\r\n\r\n    onLoad () {\r\n        this.schedule(() => this.spawnMinions(), this.SpawnTime, cc.macro.REPEAT_FOREVER, this.SpawnDelay);\r\n    }\r\n\r\n    start () {\r\n\r\n    }\r\n\r\n    // update (dt) {}\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport AudioManagerClass from \"./AudioManager\";\r\nimport PlayerMovementClass from \"./PlayerMovement\";\r\nimport PowerupClass from \"./PowerupManager\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PlayerController extends cc.Component {\r\n\r\n    @property(cc.SpriteFrame)\r\n    DefaultFrame:cc.SpriteFrame = null;\r\n\r\n    @property(cc.SpriteFrame)\r\n    SpeedUpFrame:cc.SpriteFrame = null;\r\n\r\n    @property(cc.Node)\r\n    UpgradeSprites:cc.Node[] = [];\r\n\r\n    @property(cc.Node)\r\n    upgradeMenu:cc.Node = null;\r\n\r\n    isSpeedUp:boolean = false;\r\n    @property\r\n    setSpeedChange:number = 0;\r\n\r\n    @property\r\n    MaxHealth:number = 100;\r\n\r\n    @property\r\n    Health:number = 100;\r\n\r\n    @property(cc.Label)\r\n    HealthText:cc.Label = null;\r\n\r\n    private moveSpeedLvl = 0;\r\n\r\n    private regenLvl = 0;\r\n\r\n    private regenInterval = 3;\r\n\r\n    private prevRegenInterval = 3;\r\n\r\n    private audioManager:AudioManagerClass = null;\r\n\r\n    public isGameOver:boolean = false;\r\n\r\n    onKeyDown(event) {\r\n        /*switch (event.keyCode) {\r\n            case cc.macro.KEY.num1:\r\n                this.node.getComponent(cc.Sprite).spriteFrame = this.DefaultFrame;\r\n                break;\r\n            case cc.macro.KEY.num2:\r\n                this.node.getComponent(cc.Sprite).spriteFrame = this.SpeedUpFrame;\r\n                break; \r\n        }*/\r\n    }\r\n\r\n    onKeyUp(event) {\r\n        \r\n    }\r\n\r\n    onCollisionEnter(other,self)\r\n    {\r\n        if(other.tag == 100 && !this.isSpeedUp)\r\n        {\r\n            this.isSpeedUp = true;\r\n            this.setSpeedChange = other.node.getComponent(PowerupClass).speedBuffAmt;\r\n            self.node.getComponent(PlayerMovementClass).moveSpeed += this.setSpeedChange;\r\n\r\n            // Schedule the reset of the speed buff\r\n            this.scheduleOnce(this.resetSpeedBuff, other.node.getComponent(PowerupClass).speedBuffTimer);\r\n            this.audioManager.PlayAudioEffect(this.audioManager.speedupPU, false);\r\n\r\n            other.node.destroy();\r\n        }\r\n\r\n        if(other.tag == 101)\r\n        {\r\n            this.Health += other.node.getComponent(PowerupClass).healthUpAmt;\r\n            if(this.Health > this.MaxHealth)\r\n                this.Health = this.MaxHealth;\r\n\r\n            this.audioManager.PlayAudioEffect(this.audioManager.speedupPU, false);\r\n            \r\n            other.node.destroy();\r\n        }\r\n    }\r\n\r\n    MoveSpeedUpgrade()\r\n    {\r\n        this.moveSpeedLvl++;\r\n        this.node.getComponent(PlayerMovementClass).moveSpeed += this.node.getComponent(PlayerMovementClass).moveSpeed * (this.moveSpeedLvl * 0.075);\r\n        this.audioManager.PlayAudioEffect(this.audioManager.levelUP, false, false);\r\n        this.upgradeMenu.active = false;\r\n        cc.director.resume();\r\n    }\r\n\r\n    RegenUpgrade()\r\n    {\r\n        this.regenLvl++;\r\n        this.audioManager.PlayAudioEffect(this.audioManager.levelUP, false, false);\r\n        this.upgradeMenu.active = false;\r\n        cc.director.resume();\r\n    }\r\n\r\n    MaxHPUpgrade()\r\n    {\r\n        this.Health += this.MaxHealth * 0.1;\r\n        this.MaxHealth += this.MaxHealth * 0.1;\r\n        this.audioManager.PlayAudioEffect(this.audioManager.levelUP, false, false);\r\n        this.upgradeMenu.active = false;\r\n        cc.director.resume();\r\n    }\r\n\r\n    RegenTimerReductionUpgrade()\r\n    {\r\n        this.regenInterval -= this.regenInterval * 0.05;\r\n        this.audioManager.PlayAudioEffect(this.audioManager.levelUP, false, false);\r\n        this.upgradeMenu.active = false;\r\n        cc.director.resume();\r\n    }\r\n\r\n    resetSpeedBuff() {\r\n        this.node.getComponent(PlayerMovementClass).moveSpeed -= this.setSpeedChange;\r\n        this.setSpeedChange = 0;\r\n        this.isSpeedUp = false;\r\n    }\r\n\r\n    doHealthRegen()\r\n    {\r\n        console.log(this.regenInterval);\r\n        this.Health += this.Health * (this.regenLvl * 0.05);\r\n\r\n        if(this.Health > this.MaxHealth)\r\n            this.Health = this.MaxHealth;\r\n    }\r\n\r\n    scheduleRegen()\r\n    {\r\n        this.unschedule(this.doHealthRegen);\r\n        this.schedule(this.doHealthRegen, this.regenInterval, cc.macro.REPEAT_FOREVER, 0);\r\n        this.prevRegenInterval = this.regenInterval;\r\n    }\r\n\r\n    onLoad () {\r\n        var manager = cc.director.getCollisionManager();\r\n        manager.enabled = true;\r\n\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\r\n\r\n        if(this.regenLvl > 0)\r\n            this.scheduleRegen();\r\n    }\r\n\r\n    onDestroy() {\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\r\n    }\r\n\r\n    start () \r\n    {\r\n        this.audioManager = this.node.parent.getComponentInChildren(AudioManagerClass);\r\n        `if(this.DefaultFrame == null)\r\n        {\r\n            this.DefaultFrame = this.node.getComponent(cc.Sprite).spriteFrame;\r\n        }`\r\n    }\r\n\r\n    update (dt) \r\n    {\r\n        if(this.regenLvl > 0 && this.regenInterval !== this.prevRegenInterval)\r\n        {\r\n            this.scheduleRegen();\r\n        }\r\n\r\n        this.HealthText.string = this.Health.toFixed(1);\r\n\r\n        if(this.isSpeedUp)\r\n            this.UpgradeSprites[0].active = true;\r\n        else\r\n            this.UpgradeSprites[0].active = false;\r\n    }\r\n}","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PlayerMovementClass extends cc.Component {\r\n\r\n    private moveDirection: cc.Vec3 = cc.v3(0, 0, 0);\r\n    private previousPosition: cc.Vec3 = cc.v3(0, 0, 0);\r\n    @property\r\n    public moveSpeed: number = 75; // Adjust the speed as needed\r\n\r\n    currPosition(event) {\r\n        const playerPos = this.node.position;\r\n        let mousePos = event.getLocation();\r\n        mousePos = this.node.parent.convertToNodeSpaceAR(mousePos);\r\n\r\n        // Calculate the direction from the player to the mouse position\r\n        const direction = mousePos.subtract(cc.v2(playerPos.x, playerPos.y));\r\n\r\n        // Calculate the angle in radians\r\n        const angle = Math.atan2(direction.y, direction.x);\r\n        \r\n        // Convert angle to degrees\r\n        const angleDegrees = cc.misc.radiansToDegrees(angle);\r\n\r\n        // Adjust the angle if necessary\r\n        this.node.angle = angleDegrees - 90;\r\n    }\r\n\r\n    onLoad() {\r\n        this.node.parent.on('mousemove', this.currPosition, this);\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\r\n        cc.director.getCollisionManager().enabled = true;\r\n        this.previousPosition = this.node.position.clone();\r\n    }\r\n\r\n    onDestroy() {\r\n        this.node.parent.off('mousemove', this.currPosition, this);\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\r\n        cc.director.getCollisionManager().enabled = false;\r\n    }\r\n\r\n    onKeyDown(event) {\r\n        switch (event.keyCode) {\r\n            case cc.macro.KEY.w:\r\n                this.moveDirection.y = 1;\r\n                break;\r\n            case cc.macro.KEY.s:\r\n                this.moveDirection.y = -1;\r\n                break;\r\n            case cc.macro.KEY.a:\r\n                this.moveDirection.x = -1;\r\n                break;\r\n            case cc.macro.KEY.d:\r\n                this.moveDirection.x = 1;\r\n                break;\r\n        }\r\n    }\r\n\r\n    onKeyUp(event) {\r\n        switch (event.keyCode) {\r\n            case cc.macro.KEY.w:\r\n            case cc.macro.KEY.s:\r\n                this.moveDirection.y = 0;\r\n                break;\r\n            case cc.macro.KEY.a:\r\n            case cc.macro.KEY.d:\r\n                this.moveDirection.x = 0;\r\n                break;\r\n        }\r\n    }\r\n\r\n    update(dt) {\r\n        if (this.moveDirection.mag() > 0) {\r\n            this.previousPosition = this.node.position.clone();\r\n            // Normalize the direction and multiply by the speed and delta time\r\n            const normalizedDirection = this.moveDirection.clone().normalize();\r\n            const moveStep = normalizedDirection.multiplyScalar(this.moveSpeed * dt);\r\n            this.node.position = this.node.position.add(moveStep);\r\n        }\r\n    }\r\n\r\n    onCollisionEnter(other, self) {\r\n        if (other.node.name === \"Wall\") {\r\n            // Stop movement or push back the player\r\n            this.node.position = this.previousPosition.clone();\r\n            console.log(\"Collided with wall\");\r\n        }\r\n    }\r\n\r\n    onCollisionStay(other, self) {\r\n        if (other.node.name === \"Wall\") {\r\n            // Move the player back to the previous position\r\n            this.node.position = this.previousPosition.clone();\r\n            console.log(\"Still colliding with wall\");\r\n        }\r\n    }\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PowerupClass extends cc.Component {\r\n\r\n    isSpeedUp:boolean = false;\r\n    @property\r\n    speedBuffAmt:number = 150;\r\n    @property\r\n    speedBuffTimer:number = 0;\r\n\r\n    @property\r\n    healthUpAmt:number = 0;\r\n\r\n    onLoad () {}\r\n\r\n    start () {\r\n\r\n    }\r\n\r\n    update (dt) {}\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class SceneManagerClass extends cc.Component {\r\n\r\n    @property\r\n    SceneToLoad:string = \"\";\r\n    @property(cc.Node)\r\n    ControlsWindow:cc.Node = null;\r\n    @property(cc.Node)\r\n    NodesToHide:cc.Node[] = [];\r\n\r\n    LoadScene()\r\n    {\r\n        cc.director.resume();\r\n        cc.director.loadScene(this.SceneToLoad);\r\n    }\r\n\r\n    QuitGame()\r\n    {\r\n        cc.game.end();\r\n    }\r\n\r\n    OpenControlWindows()\r\n    {\r\n        this.NodesToHide.forEach(element => {\r\n            element.active = false;\r\n        });\r\n        this.ControlsWindow.active = true;\r\n    }\r\n\r\n    CloseControlWindow()\r\n    {\r\n        this.NodesToHide.forEach(element => {\r\n            element.active = true;\r\n        });\r\n        this.ControlsWindow.active = false;\r\n    }\r\n\r\n    onLoad () {\r\n\r\n    }\r\n\r\n    start () \r\n    {\r\n        cc.director.preloadScene(this.SceneToLoad, () => {\r\n            console.log('Preloaded scene: ' + this.SceneToLoad);\r\n        });\r\n    }\r\n\r\n    // update (dt) {}\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class SprRandomiser extends cc.Component {\r\n\r\n    @property([cc.SpriteFrame])\r\n    SpritesToUse: cc.SpriteFrame[] = [];\r\n\r\n    // onLoad () {}\r\n\r\n    start () \r\n    {\r\n        var randomSprIndex = Math.floor(Math.random() * this.SpritesToUse.length);\r\n        var randomSpriteFrame = this.SpritesToUse[randomSprIndex];\r\n        \r\n        this.node.getComponent(cc.Sprite).spriteFrame = randomSpriteFrame;\r\n    }\r\n\r\n    // update (dt) {}\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class UIzPosSetterClass extends cc.Component {\r\n\r\n    @property(cc.Label)\r\n    UItoSet:cc.Label[] = [];\r\n\r\n    @property(cc.Node)\r\n    NodestoSet:cc.Node[] = [];\r\n\r\n    // onLoad () {}\r\n\r\n    start () \r\n    {\r\n        this.UItoSet.forEach(element => {\r\n            element.node.zIndex = 1000;\r\n        });\r\n\r\n        this.NodestoSet.forEach(element => {\r\n            element.zIndex = 1000;\r\n        });\r\n    }\r\n\r\n    // update (dt) {}\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class UpgradeRandomiserClass extends cc.Component {\r\n\r\n    @property(cc.Node)\r\n    upgradesToRandomise:cc.Node[] = [];\r\n\r\n    @property(cc.Node)\r\n    upgradesSP:cc.Node[] = [];\r\n\r\n    maxUpgradesToRandomise:number = 3;\r\n\r\n    // onLoad () {}\r\n\r\n    randomizeUpgrades() {\r\n        // Check if we have enough elements to randomize\r\n        if (this.upgradesToRandomise.length < this.maxUpgradesToRandomise) {\r\n            console.error(\"Not enough elements to randomize\");\r\n            return;\r\n        }\r\n    \r\n        this.upgradesToRandomise.forEach(element => {\r\n            element.active = false;\r\n        });\r\n\r\n        // Select 3 random elements from the upgradesToRandomise array\r\n        const selectedIndices = [];\r\n        while (selectedIndices.length < this.maxUpgradesToRandomise) {\r\n            const randomIndex = Math.floor(Math.random() * this.upgradesToRandomise.length);\r\n            if (!selectedIndices.includes(randomIndex)) {\r\n                selectedIndices.push(randomIndex);\r\n            }\r\n        }\r\n        \r\n        // Assign the selected elements to the positions of the upgradesSP array\r\n        selectedIndices.forEach((index, i) => {\r\n            const selectedElement = this.upgradesToRandomise[index];\r\n            const targetPosition = this.upgradesSP[i].position;\r\n            selectedElement.setPosition(targetPosition);\r\n            selectedElement.active = true;\r\n            console.log(`Element ${selectedElement.name} set to position ${targetPosition}`);\r\n            console.log(`Element ${selectedElement.name} active status: ${selectedElement.active}`);\r\n        });\r\n    }\r\n\r\n    protected onEnable(): void {\r\n        this.randomizeUpgrades();\r\n    }\r\n\r\n    start () \r\n    {\r\n        `this.upgradesToRandomise.forEach(element => {\r\n            element.active = true;\r\n        });`\r\n    }\r\n\r\n    // update (dt) {}\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class WaveSpawnsController extends cc.Component {\r\n\r\n    @property\r\n    SpawnInterval:number = 3;\r\n    @property\r\n    SpawnInterval2:number = 3;\r\n    @property\r\n    SpawnIntervalElite:number = 3;\r\n\r\n    @property(cc.Prefab)\r\n    EnemiesToSpawn:cc.Prefab[] = [];\r\n\r\n    @property(cc.Prefab)\r\n    BossToSpawn:cc.Prefab[] = [];\r\n\r\n    @property\r\n    IsBossOnField:boolean = false;\r\n}"],"file":"index.js"}